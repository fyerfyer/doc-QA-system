// Code generated by mockery v2.50.0. DO NOT EDIT.

package llm

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Chat provides a mock function with given fields: ctx, messages, options
func (_m *MockClient) Chat(ctx context.Context, messages []Message, options ...ChatOption) (*Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, messages)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []Message, ...ChatOption) (*Response, error)); ok {
		return rf(ctx, messages, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []Message, ...ChatOption) *Response); ok {
		r0 = rf(ctx, messages, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []Message, ...ChatOption) error); ok {
		r1 = rf(ctx, messages, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type MockClient_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []Message
//   - options ...ChatOption
func (_e *MockClient_Expecter) Chat(ctx interface{}, messages interface{}, options ...interface{}) *MockClient_Chat_Call {
	return &MockClient_Chat_Call{Call: _e.mock.On("Chat",
		append([]interface{}{ctx, messages}, options...)...)}
}

func (_c *MockClient_Chat_Call) Run(run func(ctx context.Context, messages []Message, options ...ChatOption)) *MockClient_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ChatOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ChatOption)
			}
		}
		run(args[0].(context.Context), args[1].([]Message), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_Chat_Call) Return(_a0 *Response, _a1 error) *MockClient_Chat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Chat_Call) RunAndReturn(run func(context.Context, []Message, ...ChatOption) (*Response, error)) *MockClient_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// Generate provides a mock function with given fields: ctx, prompt, options
func (_m *MockClient) Generate(ctx context.Context, prompt string, options ...GenerateOption) (*Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prompt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...GenerateOption) (*Response, error)); ok {
		return rf(ctx, prompt, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...GenerateOption) *Response); ok {
		r0 = rf(ctx, prompt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...GenerateOption) error); ok {
		r1 = rf(ctx, prompt, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockClient_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - prompt string
//   - options ...GenerateOption
func (_e *MockClient_Expecter) Generate(ctx interface{}, prompt interface{}, options ...interface{}) *MockClient_Generate_Call {
	return &MockClient_Generate_Call{Call: _e.mock.On("Generate",
		append([]interface{}{ctx, prompt}, options...)...)}
}

func (_c *MockClient_Generate_Call) Run(run func(ctx context.Context, prompt string, options ...GenerateOption)) *MockClient_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]GenerateOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(GenerateOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_Generate_Call) Return(_a0 *Response, _a1 error) *MockClient_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Generate_Call) RunAndReturn(run func(context.Context, string, ...GenerateOption) (*Response, error)) *MockClient_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockClient_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockClient_Expecter) Name() *MockClient_Name_Call {
	return &MockClient_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockClient_Name_Call) Run(run func()) *MockClient_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Name_Call) Return(_a0 string) *MockClient_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Name_Call) RunAndReturn(run func() string) *MockClient_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
