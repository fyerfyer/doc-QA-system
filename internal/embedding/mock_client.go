// Code generated by mockery v2.50.0. DO NOT EDIT.

package embedding

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Embed provides a mock function with given fields: ctx, text
func (_m *MockClient) Embed(ctx context.Context, text string) ([]float32, error) {
	ret := _m.Called(ctx, text)

	if len(ret) == 0 {
		panic("no return value specified for Embed")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]float32, error)); ok {
		return rf(ctx, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []float32); ok {
		r0 = rf(ctx, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmbedBatch provides a mock function with given fields: ctx, texts
func (_m *MockClient) EmbedBatch(ctx context.Context, texts []string) ([][]float32, error) {
	ret := _m.Called(ctx, texts)

	if len(ret) == 0 {
		panic("no return value specified for EmbedBatch")
	}

	var r0 [][]float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([][]float32, error)); ok {
		return rf(ctx, texts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) [][]float32); ok {
		r0 = rf(ctx, texts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, texts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with no fields
func (_m *MockClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
