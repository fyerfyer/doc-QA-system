// Code generated by mockery v2.50.0. DO NOT EDIT.

package taskqueue

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockQueue is an autogenerated mock type for the Queue type
type MockQueue struct {
	mock.Mock
}

type MockQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueue) EXPECT() *MockQueue_Expecter {
	return &MockQueue_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockQueue) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockQueue_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockQueue_Expecter) Close() *MockQueue_Close_Call {
	return &MockQueue_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockQueue_Close_Call) Run(run func()) *MockQueue_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueue_Close_Call) Return(_a0 error) *MockQueue_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_Close_Call) RunAndReturn(run func() error) *MockQueue_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, taskID
func (_m *MockQueue) DeleteTask(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockQueue_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockQueue_Expecter) DeleteTask(ctx interface{}, taskID interface{}) *MockQueue_DeleteTask_Call {
	return &MockQueue_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, taskID)}
}

func (_c *MockQueue_DeleteTask_Call) Run(run func(ctx context.Context, taskID string)) *MockQueue_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueue_DeleteTask_Call) Return(_a0 error) *MockQueue_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_DeleteTask_Call) RunAndReturn(run func(context.Context, string) error) *MockQueue_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, taskType, documentID, payload
func (_m *MockQueue) Enqueue(ctx context.Context, taskType TaskType, documentID string, payload interface{}) (string, error) {
	ret := _m.Called(ctx, taskType, documentID, payload)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}) (string, error)); ok {
		return rf(ctx, taskType, documentID, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}) string); ok {
		r0 = rf(ctx, taskType, documentID, payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, TaskType, string, interface{}) error); ok {
		r1 = rf(ctx, taskType, documentID, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - taskType TaskType
//   - documentID string
//   - payload interface{}
func (_e *MockQueue_Expecter) Enqueue(ctx interface{}, taskType interface{}, documentID interface{}, payload interface{}) *MockQueue_Enqueue_Call {
	return &MockQueue_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, taskType, documentID, payload)}
}

func (_c *MockQueue_Enqueue_Call) Run(run func(ctx context.Context, taskType TaskType, documentID string, payload interface{})) *MockQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TaskType), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockQueue_Enqueue_Call) Return(_a0 string, _a1 error) *MockQueue_Enqueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_Enqueue_Call) RunAndReturn(run func(context.Context, TaskType, string, interface{}) (string, error)) *MockQueue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueAt provides a mock function with given fields: ctx, taskType, documentID, payload, processAt
func (_m *MockQueue) EnqueueAt(ctx context.Context, taskType TaskType, documentID string, payload interface{}, processAt time.Time) (string, error) {
	ret := _m.Called(ctx, taskType, documentID, payload, processAt)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueAt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}, time.Time) (string, error)); ok {
		return rf(ctx, taskType, documentID, payload, processAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}, time.Time) string); ok {
		r0 = rf(ctx, taskType, documentID, payload, processAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, TaskType, string, interface{}, time.Time) error); ok {
		r1 = rf(ctx, taskType, documentID, payload, processAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_EnqueueAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueAt'
type MockQueue_EnqueueAt_Call struct {
	*mock.Call
}

// EnqueueAt is a helper method to define mock.On call
//   - ctx context.Context
//   - taskType TaskType
//   - documentID string
//   - payload interface{}
//   - processAt time.Time
func (_e *MockQueue_Expecter) EnqueueAt(ctx interface{}, taskType interface{}, documentID interface{}, payload interface{}, processAt interface{}) *MockQueue_EnqueueAt_Call {
	return &MockQueue_EnqueueAt_Call{Call: _e.mock.On("EnqueueAt", ctx, taskType, documentID, payload, processAt)}
}

func (_c *MockQueue_EnqueueAt_Call) Run(run func(ctx context.Context, taskType TaskType, documentID string, payload interface{}, processAt time.Time)) *MockQueue_EnqueueAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TaskType), args[2].(string), args[3].(interface{}), args[4].(time.Time))
	})
	return _c
}

func (_c *MockQueue_EnqueueAt_Call) Return(_a0 string, _a1 error) *MockQueue_EnqueueAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_EnqueueAt_Call) RunAndReturn(run func(context.Context, TaskType, string, interface{}, time.Time) (string, error)) *MockQueue_EnqueueAt_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueIn provides a mock function with given fields: ctx, taskType, documentID, payload, delay
func (_m *MockQueue) EnqueueIn(ctx context.Context, taskType TaskType, documentID string, payload interface{}, delay time.Duration) (string, error) {
	ret := _m.Called(ctx, taskType, documentID, payload, delay)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueIn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}, time.Duration) (string, error)); ok {
		return rf(ctx, taskType, documentID, payload, delay)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TaskType, string, interface{}, time.Duration) string); ok {
		r0 = rf(ctx, taskType, documentID, payload, delay)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, TaskType, string, interface{}, time.Duration) error); ok {
		r1 = rf(ctx, taskType, documentID, payload, delay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_EnqueueIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueIn'
type MockQueue_EnqueueIn_Call struct {
	*mock.Call
}

// EnqueueIn is a helper method to define mock.On call
//   - ctx context.Context
//   - taskType TaskType
//   - documentID string
//   - payload interface{}
//   - delay time.Duration
func (_e *MockQueue_Expecter) EnqueueIn(ctx interface{}, taskType interface{}, documentID interface{}, payload interface{}, delay interface{}) *MockQueue_EnqueueIn_Call {
	return &MockQueue_EnqueueIn_Call{Call: _e.mock.On("EnqueueIn", ctx, taskType, documentID, payload, delay)}
}

func (_c *MockQueue_EnqueueIn_Call) Run(run func(ctx context.Context, taskType TaskType, documentID string, payload interface{}, delay time.Duration)) *MockQueue_EnqueueIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TaskType), args[2].(string), args[3].(interface{}), args[4].(time.Duration))
	})
	return _c
}

func (_c *MockQueue_EnqueueIn_Call) Return(_a0 string, _a1 error) *MockQueue_EnqueueIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_EnqueueIn_Call) RunAndReturn(run func(context.Context, TaskType, string, interface{}, time.Duration) (string, error)) *MockQueue_EnqueueIn_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, taskID
func (_m *MockQueue) GetTask(ctx context.Context, taskID string) (*Task, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Task, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockQueue_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockQueue_Expecter) GetTask(ctx interface{}, taskID interface{}) *MockQueue_GetTask_Call {
	return &MockQueue_GetTask_Call{Call: _e.mock.On("GetTask", ctx, taskID)}
}

func (_c *MockQueue_GetTask_Call) Run(run func(ctx context.Context, taskID string)) *MockQueue_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueue_GetTask_Call) Return(_a0 *Task, _a1 error) *MockQueue_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_GetTask_Call) RunAndReturn(run func(context.Context, string) (*Task, error)) *MockQueue_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByDocument provides a mock function with given fields: ctx, documentID
func (_m *MockQueue) GetTasksByDocument(ctx context.Context, documentID string) ([]*Task, error) {
	ret := _m.Called(ctx, documentID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByDocument")
	}

	var r0 []*Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Task, error)); ok {
		return rf(ctx, documentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Task); ok {
		r0 = rf(ctx, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_GetTasksByDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByDocument'
type MockQueue_GetTasksByDocument_Call struct {
	*mock.Call
}

// GetTasksByDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - documentID string
func (_e *MockQueue_Expecter) GetTasksByDocument(ctx interface{}, documentID interface{}) *MockQueue_GetTasksByDocument_Call {
	return &MockQueue_GetTasksByDocument_Call{Call: _e.mock.On("GetTasksByDocument", ctx, documentID)}
}

func (_c *MockQueue_GetTasksByDocument_Call) Run(run func(ctx context.Context, documentID string)) *MockQueue_GetTasksByDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueue_GetTasksByDocument_Call) Return(_a0 []*Task, _a1 error) *MockQueue_GetTasksByDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_GetTasksByDocument_Call) RunAndReturn(run func(context.Context, string) ([]*Task, error)) *MockQueue_GetTasksByDocument_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyTaskUpdate provides a mock function with given fields: ctx, taskID
func (_m *MockQueue) NotifyTaskUpdate(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for NotifyTaskUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_NotifyTaskUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyTaskUpdate'
type MockQueue_NotifyTaskUpdate_Call struct {
	*mock.Call
}

// NotifyTaskUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockQueue_Expecter) NotifyTaskUpdate(ctx interface{}, taskID interface{}) *MockQueue_NotifyTaskUpdate_Call {
	return &MockQueue_NotifyTaskUpdate_Call{Call: _e.mock.On("NotifyTaskUpdate", ctx, taskID)}
}

func (_c *MockQueue_NotifyTaskUpdate_Call) Run(run func(ctx context.Context, taskID string)) *MockQueue_NotifyTaskUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueue_NotifyTaskUpdate_Call) Return(_a0 error) *MockQueue_NotifyTaskUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_NotifyTaskUpdate_Call) RunAndReturn(run func(context.Context, string) error) *MockQueue_NotifyTaskUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatus provides a mock function with given fields: ctx, taskID, status, result, errorMsg
func (_m *MockQueue) UpdateTaskStatus(ctx context.Context, taskID string, status TaskStatus, result interface{}, errorMsg string) error {
	ret := _m.Called(ctx, taskID, status, result, errorMsg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, TaskStatus, interface{}, string) error); ok {
		r0 = rf(ctx, taskID, status, result, errorMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_UpdateTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatus'
type MockQueue_UpdateTaskStatus_Call struct {
	*mock.Call
}

// UpdateTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - status TaskStatus
//   - result interface{}
//   - errorMsg string
func (_e *MockQueue_Expecter) UpdateTaskStatus(ctx interface{}, taskID interface{}, status interface{}, result interface{}, errorMsg interface{}) *MockQueue_UpdateTaskStatus_Call {
	return &MockQueue_UpdateTaskStatus_Call{Call: _e.mock.On("UpdateTaskStatus", ctx, taskID, status, result, errorMsg)}
}

func (_c *MockQueue_UpdateTaskStatus_Call) Run(run func(ctx context.Context, taskID string, status TaskStatus, result interface{}, errorMsg string)) *MockQueue_UpdateTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(TaskStatus), args[3].(interface{}), args[4].(string))
	})
	return _c
}

func (_c *MockQueue_UpdateTaskStatus_Call) Return(_a0 error) *MockQueue_UpdateTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_UpdateTaskStatus_Call) RunAndReturn(run func(context.Context, string, TaskStatus, interface{}, string) error) *MockQueue_UpdateTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForTask provides a mock function with given fields: ctx, taskID, timeout
func (_m *MockQueue) WaitForTask(ctx context.Context, taskID string, timeout time.Duration) (*Task, error) {
	ret := _m.Called(ctx, taskID, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitForTask")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (*Task, error)); ok {
		return rf(ctx, taskID, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *Task); ok {
		r0 = rf(ctx, taskID, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, taskID, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueue_WaitForTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForTask'
type MockQueue_WaitForTask_Call struct {
	*mock.Call
}

// WaitForTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - timeout time.Duration
func (_e *MockQueue_Expecter) WaitForTask(ctx interface{}, taskID interface{}, timeout interface{}) *MockQueue_WaitForTask_Call {
	return &MockQueue_WaitForTask_Call{Call: _e.mock.On("WaitForTask", ctx, taskID, timeout)}
}

func (_c *MockQueue_WaitForTask_Call) Run(run func(ctx context.Context, taskID string, timeout time.Duration)) *MockQueue_WaitForTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockQueue_WaitForTask_Call) Return(_a0 *Task, _a1 error) *MockQueue_WaitForTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueue_WaitForTask_Call) RunAndReturn(run func(context.Context, string, time.Duration) (*Task, error)) *MockQueue_WaitForTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueue creates a new instance of MockQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueue {
	mock := &MockQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
